import kotlin.math.exp
import kotlin.math.log
import kotlin.math.pow
import kotlin.math.sqrt

/**
 * Euler's totient function  */

fun main() {

    // [(2, 6), (5, 6)]
    println(factorization(1000000))

    // [(3, 1), (5, 1), (823, 1)]
    println(factorization(12345))

    // [(2, 1), (3, 1), (5, 1), (31, 1), (73, 1)]
    println(factorization(67890))

    
    // 96
    println(eulerTotient(97))
    
    // 3200
    println(eulerTotient(8800))

    // 400000
    println(eulerTotient(1000000))
    
}

fun eulerTotient(n: Int) : Int{
    val pairList = factorization(n)

    var total = 1.0

    pairList.forEach {
        total *= (it.first-1) * it.first.toDouble().pow(it.second-1)
    }

    return total.toInt()
}

// Factorize a number, return List of Pair(prime, times)   1000 = [(2, 3), (5, 3)]
fun factorization(n:Int) :List<Pair<Int, Int>>{
    
    val size = getPrimeListSize(n)
    
    val primeList = findNPrime(size)
    
    return fac(n, primeList)
}

// The biggest prime number in prime list is about sqrt(n).
fun fac(n: Int, primeList: List<Int>): List<Pair<Int, Int>> {

    // Init steps
    var number = n
    val facList = mutableListOf<Pair<Int, Int>>()
    var index = -1

    // Check each prime number.
    for (prime in primeList) {

        // Divisor are 1 and number.
        if (prime > sqrt(number.toDouble())){
            facList.add(Pair(number, 1))
            return facList
        }

        // If it's divisor, put it into list
        if (number % prime == 0) {
            facList.add(Pair(prime, 0))
            index += 1
        }

        // Factor num until they are coPrime.
        while (number > 1 && number % prime == 0) {
            facList[index] = facList[index] + 1
            number /= prime
        }

        // If finish factor, return list.
        if (number == 1)
            return facList
    }

    // Do nothing.
    return facList
}

operator fun Pair<Int, Int>.plus(int: Int) = Pair(this.first, this.second + int)

// Prime number theorem, find 26% more incase n is small.
fun getPrimeListSize(n: Int): Int {
    return (n / log(n.toDouble(), exp(1.0)) * 1.26).toInt()
}

// Return first n prime numbers as a list.
fun findNPrime(size: Int): MutableList<Int> {

    // Handle argument issue.
    if (size < 0) throw IllegalArgumentException("Size should be non-negative.")

    // If size = 0, just return empty list.
    if (size == 0) return mutableListOf()

    var num = 2
    val primeList = mutableListOf<Int>()

    // Put 2 in list, so when in loop, only look at odd number.
    primeList += num

    // Next prime number is 3.
    num += 1


    // Check if num is prime number.
    fun isPrime(num: Int): Boolean {

        // If num is not prime number, it can only be divide by 2..sqrt(num).
        for (prime in primeList) {

            // Can not be divide.
            if (prime > sqrt(num.toDouble())) {
                return true
            }

            // Can be divide.
            if (num % prime == 0)
                return false
        }
        return false
    }

    // Still need size - 1 prime number.  Had put 2 in list.
    var need = size - 1

    // Keep generate until list size = n.
    while (need > 0) {

        // Check if num is prime
        val isPrime = isPrime(num)

        // Num is prime.
        if (isPrime) {

            // Put it into prime number list
            primeList += num
            need -= 1

        }

        // Look for next odd number
        num += 2
    }
    return primeList
}
