import kotlin.math.pow

// For Quadratic reciprocity
fun main() {

    // 1
    println(legendreSymbol(101, 1987))

    // 1
    println(legendreSymbol(33, 34))

    // -1
    println(legendreSymbol(33, 38))
}

// a and b are odd number.
fun legendreSymbol(a: Long, b: Long): Int {
    when {
        
        // Base case
        a == 0L->{
            return 1
        }
        
        // Case 1.
        a == -1L -> {
            when (b % 4) {
                1L -> return 1
                3L -> return -1
            }
        }
        
        // Case 2.
        a == 2L -> {
            when (b % 8) {
                1L, 7L -> return 1
                3L, 5L -> return -1
            }
        }
        
        // Case 3, swap a and b.
        else -> {
            var top = b % a
            var time = 0
            while (top > 0L && top % 2 == 0L) {
                top /= 2L
                time += 1
            }
            return legendreSymbol(2L, a).toDouble().pow(time).toInt() * (
                    if (a % 4 == 1L || b % 4 == 1L) legendreSymbol(
                        top,
                        a
                    ) else -legendreSymbol(top, a)
                    )
        }
    }
    
    // error
    return -2
}
